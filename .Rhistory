scale_colour_manual(name = "Joined data from MaStR and amprion",
values="#0074ff")
#plot
p_e_yield_per_area +  theme(legend.position = c(0.7,0.9))
#save plot
ggsave("e_yield_per_m2_over_commissioning_date.png",
plot = last_plot(),
dpi = 900,
width = 7,
height = 4)
#save plot
ggsave("results_of_analysis/e_yield_per_m2_over_commissioning_date.png",
plot = last_plot(),
dpi = 900,
width = 7,
height = 4)
#plot electricity yield per area over commissioning date
p_e_yield_per_area <- ggplot() +
geom_point(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2),
size = 0.4, colour = "#00A2ff") +
geom_smooth(data = wts_rlp_filtered,
aes(x=inbetriebnahme, y=kwh_m2, colour = "2019"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
ylim(0,80) +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
xlab("Commissioning date") +
ylab("Electricity yield per area [kWh/m²a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 27.4, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=25,label="Mean of ~ 27.4 kWh/m²a after 2010", size = 2.5) +
geom_hline(yintercept = 33.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=35.5,label="Predicted mean of  ~ 33.5 kWh/m²a in 2021",
size = 2.5) +
geom_hline(yintercept = 40.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=42.5,label="Predicted mean of ~ 40.5 kWh/m²a in 2030",
size = 2.5) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=5,label= "R² = ~ 11 % \n p-value << 0.001") +
scale_colour_manual(name = "Joined data from MaStR and amprion",
values="#00A2ff")
#plot
p_e_yield_per_area +  theme(legend.position = c(0.7,0.9))
#save plot
ggsave("results_of_analysis/e_yield_per_m2_over_commissioning_date.png",
plot = last_plot(),
dpi = 900,
width = 7,
height = 4)
4157037/1000000
citation()
1203+1698
8317+8330+2901
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265")
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/amprion")
Sys.setenv(LANG = "en")
pacman::p_load(rio, data.table, tidyverse, tidyr, purrr, magrittr, compare,
ggplot2, DiagrammeR)
amprion_2015 <- read.csv("results_of_preparation/amprion_2015_processed.csv")
amprion_2016 <- read.csv("results_of_preparation/amprion_2016_processed.csv")
amprion_2017 <- read.csv("results_of_preparation/amprion_2017_processed.csv")
amprion_2018 <- read.csv("results_of_preparation/amprion_2018_processed.csv")
amprion_2019 <- read.csv("results_of_preparation/amprion_2019_processed.csv")
#formatting commissioning date
amprion_2015$inbetriebnahme <- as.Date(amprion_2015$inbetriebnahme, "%Y-%m-%d")
amprion_2016$inbetriebnahme <- as.Date(amprion_2016$inbetriebnahme, "%Y-%m-%d")
amprion_2017$inbetriebnahme <- as.Date(amprion_2017$inbetriebnahme, "%Y-%m-%d")
amprion_2018$inbetriebnahme <- as.Date(amprion_2018$inbetriebnahme, "%Y-%m-%d")
amprion_2019$inbetriebnahme <- as.Date(amprion_2019$inbetriebnahme, "%Y-%m-%d")
lm_electricity_yield_2017 <- lm(
amprion_2017$menge_mwh ~ amprion_2017$inbetriebnahme)
lm_electricity_yield_2018 <- lm(
amprion_2018$menge_mwh ~ amprion_2018$inbetriebnahme)
lm_electricity_yield_2019 <- lm(
amprion_2019$menge_mwh ~ amprion_2019$inbetriebnahme)
10000/4
10000/4
10000/4
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/amprion")
Sys.setenv(LANG = "en")
pacman::p_load(rio, data.table, tidyverse, tidyr, purrr, magrittr, compare,
ggplot2, DiagrammeR)
amprion_2015 <- read.csv("results_of_preparation/amprion_2015_processed.csv")
amprion_2016 <- read.csv("results_of_preparation/amprion_2016_processed.csv")
amprion_2017 <- read.csv("results_of_preparation/amprion_2017_processed.csv")
amprion_2018 <- read.csv("results_of_preparation/amprion_2018_processed.csv")
amprion_2019 <- read.csv("results_of_preparation/amprion_2019_processed.csv")
amprion_2015$inbetriebnahme <- as.Date(amprion_2015$inbetriebnahme, "%Y-%m-%d")
amprion_2016$inbetriebnahme <- as.Date(amprion_2016$inbetriebnahme, "%Y-%m-%d")
amprion_2017$inbetriebnahme <- as.Date(amprion_2017$inbetriebnahme, "%Y-%m-%d")
amprion_2018$inbetriebnahme <- as.Date(amprion_2018$inbetriebnahme, "%Y-%m-%d")
amprion_2019$inbetriebnahme <- as.Date(amprion_2019$inbetriebnahme, "%Y-%m-%d")
lm_electricity_yield_2017 <- lm(
amprion_2017$menge_mwh ~ amprion_2017$inbetriebnahme)
#2018
lm_electricity_yield_2018 <- lm(
amprion_2018$menge_mwh ~ amprion_2018$inbetriebnahme)
#2019
lm_electricity_yield_2019 <- lm(
amprion_2019$menge_mwh ~ amprion_2019$inbetriebnahme)
#check polynomial model
#2017
pm_electricity_yield_2017 <- lm(
amprion_2017$menge_mwh ~
poly(amprion_2017$inbetriebnahme, 3))
#2018
pm_electricity_yield_2018 <- lm(
amprion_2018$menge_mwh ~
poly(amprion_2018$inbetriebnahme, 3))
#2019
pm_electricity_yield_2019 <- lm(
amprion_2019$menge_mwh ~
poly(amprion_2019$inbetriebnahme, 3))
#linear models with rated capacity over commissioning date
lm_rated_capacity_over_time_2019 <- lm(
amprion_2019$leistung ~ amprion_2019$inbetriebnahme)
#Plot rated capacity over commissioning date with linear trend 2017 - 2019
prated_capacity_over_commission <- ggplot() +
geom_point(data = amprion_2019,
aes(x=inbetriebnahme, y=leistung),
size = 0.4, colour = "#94fc03") +
geom_smooth(data = amprion_2019,
aes(x=inbetriebnahme, y=leistung, colour = "2019"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
ylim(-1000, 6000) +
xlab("Commissioning Date") +
ylab("Rated capacity [kW]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 3500, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1997-01-01"),
y=3300,label="mean of ~ 3,500 kW in 2021", size = 2.5) +
geom_hline(yintercept = 4500, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1997-01-01"),
y=4700,label="Predicted mean of ~ 4,500 kW in 2030", size = 2.5) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=0,label= "R² = ~ 70 %") +
scale_colour_manual(name = "Year", values="#94fc03")
#print plot
prated_capacity_over_commission +  theme(legend.position = c(0.25,0.9))
#linear models with full load hours  over the commissioning date 2015 - 2019
#2015
lm_flh_2015 <- lm(
amprion_2015$flh ~ amprion_2015$inbetriebnahme)
#2016
lm_flh_2016 <- lm(
amprion_2016$flh ~ amprion_2016$inbetriebnahme)
#2017
lm_flh_2017 <- lm(
amprion_2017$flh ~ amprion_2017$inbetriebnahme)
#2018
lm_flh_2018 <- lm(
amprion_2018$flh ~ amprion_2018$inbetriebnahme)
#2019
lm_flh_2019 <- lm(
amprion_2019$flh ~ amprion_2019$inbetriebnahme)
#plot full load hours over commissioning date with trend
pflh <- ggplot() +
geom_point(data = amprion_2015, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#fd00e2") +
geom_point(data = amprion_2016, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#fde600") +
geom_point(data = amprion_2017, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#03a1fc") +
geom_point(data = amprion_2018, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#fc5a03") +
geom_point(data = amprion_2019, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#94fc03") +
geom_smooth(data = amprion_2015,
aes(x=inbetriebnahme, y=flh, colour = "2015"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2016,
aes(x=inbetriebnahme, y=flh, colour = "2016"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2017,
aes(x=inbetriebnahme, y=flh, colour = "2017"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2018,
aes(x=inbetriebnahme, y=flh, colour = "2018"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2019,
aes(x=inbetriebnahme, y=flh, colour = "2019"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
ylim(0, 4000) +
xlab("Commissioning Date") +
ylab("Full load hours [h/a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 2300, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1997-01-01"),
y=2200,label="mean of ~ 2,300 h/a in 2021 with linear trends",
size = 2.5) +
geom_hline(yintercept = 2800, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2000-01-01"),
y=2900,label="mean of ~ 2,800 h/a in 2030 with linear trends",
size = 2.5) +
geom_hline(yintercept = 15000, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2003-01-01"),
y=14200, label="> 15,000 MWh/a in 2030 with polynomial models",
size = 2.5) +
annotate(geom="text",x=as.Date("2026-01-01"),
y=800,label= "All R²  ~ 46 - 51 %", size = 2.5) +
annotate(geom="text",x=as.Date("2026-01-01"),
y=400,label="p-values all << 0.001", size = 2.5) +
scale_colour_manual(name = "Year",
values=c("#fd00e2", "#fde600",
"#03a1fc", "#fc5a03", "#94fc03"))
#print plot
pflh +  theme(legend.position = c(0.35,0.93))
#plot full load hours over commissioning date with trend
pflh <- ggplot() +
geom_point(data = amprion_2015, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#fd00e2") +
geom_point(data = amprion_2016, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#fde600") +
geom_point(data = amprion_2017, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#03a1fc") +
geom_point(data = amprion_2018, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#fc5a03") +
geom_point(data = amprion_2019, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#94fc03") +
geom_smooth(data = amprion_2015,
aes(x=inbetriebnahme, y=flh, colour = "2015"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2016,
aes(x=inbetriebnahme, y=flh, colour = "2016"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2017,
aes(x=inbetriebnahme, y=flh, colour = "2017"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2018,
aes(x=inbetriebnahme, y=flh, colour = "2018"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2019,
aes(x=inbetriebnahme, y=flh, colour = "2019"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2019,
aes(x=inbetriebnahme, y=flh, colour = "2019"),
method= "lm", formula = y ~ poly(x, 3),
fullrange = TRUE, size = 0.5)  +
theme_light() +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
ylim(0, 4000) +
xlab("Commissioning Date") +
ylab("Full load hours [h/a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 2300, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1997-01-01"),
y=2200,label="mean of ~ 2,300 h/a in 2021 with linear trends",
size = 2.5) +
geom_hline(yintercept = 2800, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2000-01-01"),
y=2900,label="mean of ~ 2,800 h/a in 2030 with linear trends",
size = 2.5) +
geom_hline(yintercept = 15000, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2003-01-01"),
y=14200, label="> 15,000 MWh/a in 2030 with polynomial models",
size = 2.5) +
annotate(geom="text",x=as.Date("2026-01-01"),
y=800,label= "All R²  ~ 46 - 51 %", size = 2.5) +
annotate(geom="text",x=as.Date("2026-01-01"),
y=400,label="p-values all << 0.001", size = 2.5) +
scale_colour_manual(name = "Year",
values=c("#fd00e2", "#fde600",
"#03a1fc", "#fc5a03", "#94fc03"))
#print plot
pflh +  theme(legend.position = c(0.35,0.93))
#plot full load hours over commissioning date with trend
pflh <- ggplot() +
geom_point(data = amprion_2015, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#fd00e2") +
geom_point(data = amprion_2016, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#fde600") +
geom_point(data = amprion_2017, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#03a1fc") +
geom_point(data = amprion_2018, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#fc5a03") +
geom_point(data = amprion_2019, aes(x=inbetriebnahme, y=flh),
size = 0.4, colour = "#94fc03") +
geom_smooth(data = amprion_2015,
aes(x=inbetriebnahme, y=flh, colour = "2015"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2016,
aes(x=inbetriebnahme, y=flh, colour = "2016"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2017,
aes(x=inbetriebnahme, y=flh, colour = "2017"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2018,
aes(x=inbetriebnahme, y=flh, colour = "2018"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
geom_smooth(data = amprion_2019,
aes(x=inbetriebnahme, y=flh, colour = "2019"),
method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
ylim(0, 4000) +
xlab("Commissioning Date") +
ylab("Full load hours [h/a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 2300, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1997-01-01"),
y=2200,label="mean of ~ 2,300 h/a in 2021 with linear trends",
size = 2.5) +
geom_hline(yintercept = 2800, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2000-01-01"),
y=2900,label="mean of ~ 2,800 h/a in 2030 with linear trends",
size = 2.5) +
geom_hline(yintercept = 15000, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2003-01-01"),
y=14200, label="> 15,000 MWh/a in 2030 with polynomial models",
size = 2.5) +
annotate(geom="text",x=as.Date("2026-01-01"),
y=800,label= "All R²  ~ 46 - 51 %", size = 2.5) +
annotate(geom="text",x=as.Date("2026-01-01"),
y=400,label="p-values all << 0.001", size = 2.5) +
scale_colour_manual(name = "Year",
values=c("#fd00e2", "#fde600",
"#03a1fc", "#fc5a03", "#94fc03"))
#print plot
pflh +  theme(legend.position = c(0.35,0.93))
Sys.setenv(LANG = "en")
pacman::p_load(data.table, tidyverse, magrittr, leaflet, htmltools,
htmlwidgets)
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/MaStR_amprion_analysis")
wts_rlp_distances <- read.csv(
"result_of_distance_estimation/wts_rlp_distances.csv")
wts_rlp_distances$inbetriebnahme <- as.Date(
wts_rlp_distances$inbetriebnahme, "%Y-%m-%d")
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/MaStR_amprion_analysis")
Sys.setenv(LANG = "en")
pacman::p_load(data.table, tidyverse, magrittr, leaflet, sp, raster, htmltools,
htmlwidgets, sf, spatstat, rgeos)
MaStR_amprion <- read.csv("MaStR_amprion2019.csv")
attach(MaStR_amprion)
MaStR_amprion$l_wgs84 <- gsub(",",".", l_wgs84)
MaStR_amprion$b_wgs84 <- gsub(",",".", b_wgs84)
MaStR_amprion$b_wgs84 <- as.numeric(MaStR_amprion$b_wgs84)
MaStR_amprion$l_wgs84 <- as.numeric(MaStR_amprion$l_wgs84)
View(MaStR_amprion)
border_sf  <- st_read("Borders_RLP_shape/Landesgrenze_RLP.shp")
border_sp <- readOGR("Borders_RLP_shape/Landesgrenze_RLP.shp")
border_sp <- readOGR("Borders_RLP_shape/Landesgrenze_RLP.shp")
pacman::p_load(data.table, tidyverse, magrittr, leaflet, sp, raster, htmltools,
htmlwidgets, sf, spatstat, rgeos)
border_sp <- readOGR("Borders_RLP_shape/Landesgrenze_RLP.shp")
coordinates(MaStR_amprion) <- ~ l_wgs84 + b_wgs84
WGS84 <- CRS("+proj=longlat +datum=WGS84 +no_defs")
crs(MaStR_amprion) <- WGS84
wts_rlp <- MaStR_amprion[border_sp,]
wts_rlp_df <- as.data.frame(wts_rlp)
?readOGR
Sys.setenv(LANG = "en")
pacman::p_load(data.table, tidyverse, magrittr, leaflet, sp, raster, htmltools,
htmlwidgets, sf, spatstat, rgeos, rgdal)
border_sp <- readOGR("Borders_RLP_shape/Landesgrenze_RLP.shp")
wts_rlp <- MaStR_amprion[border_sp,]
wts_rlp_df <- as.data.frame(wts_rlp)
wts_rlp_sf <- st_as_sf(wts_rlp)
wts_rlp_flat <- st_transform(wts_rlp_sf, crs = 6345)
border_flat <- st_transform(border_sf, crs = 6345)
wts_rlp_ppp  <- as.ppp(wts_rlp_flat)
border_owin <- as.owin(border_flat)
plot(wts_rlp_flat)
Window(wts_rlp_ppp) <- border_owin
plot(wts_rlp_ppp, cols=rgb(0,0,0,.2), pch=20)
mean(nndist(wts_rlp_ppp, k=1))
nearest <- nndist(wts_rlp_ppp, k=1)
wts_rlp_distances <- data.frame(wts_rlp_df, nearest)
wts_rlp_distances$nearest <- round(wts_rlp_distances$nearest)
leaflet(data = wts_rlp_distances) %>%
addTiles() %>%
addPolygons(data = border_sp,
color = "#5DADE2",
weight = 2,
opacity = 0.6,
fillColor = "#5DADE200",
highlight = highlightOptions(weight = 7,
color = "#5DADE2",
fillColor = "#5DADE2",
fillOpacity = 0.3,
bringToFront = TRUE),
label = "Rheinland-Pfalz",
group = "Rheinland-Pfalz") %>%
addMarkers(lng = wts_rlp$l_wgs84,
lat = wts_rlp$b_wgs84,
clusterOptions = markerClusterOptions(disableClusteringAtZoom = 10),
popup = ~paste("<h3> Daten der Windkraftanlage</h3>",
"<b>Distance to next WT:</b>", nearest, "<br>"))
#create colum with mwh and area
wts_rlp_distances <- wts_rlp_distances %>%
mutate(menge_mwh = round(menge_kwh/1000)) %>%
mutate(area_m2 = round(nearest^2)) %>%
mutate(area_km2 = round(area_m2/1000000, digits = 3)) %>%
mutate(kwh_m2 = round(menge_kwh/area_m2, digits = 3)) %>%
mutate(d = round(nearest/rotor_m))
View(wts_rlp_distances)
#create flow chart of distance estimation
grViz(diagram = "digraph flowchart {
node [fontname = arial, shape = oval, fixedsize = FALSE]
tab1 [label = '@@1', fontsize=30]
tab2 [label = '@@2', fontsize=30]
tab3 [label = '@@3', fontsize=30]
tab4 [label = '@@4', fontsize=30]
tab5 [label = '@@5', fontsize=30]
tab6 [label = '@@6', fontsize=30]
tab7 [label = '@@7', fontsize=30]
tab8 [label = '@@8', fontsize=30]
tab9 [label = '@@9', fontsize=30]
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7 -> tab8 -> tab9;
}
[1]: 'Import of merged data set of Amprion and MaStR'
[2]: 'Adjust format'
[3]: 'Load border of RLP as shape files'
[4]: 'Unify CRS'
[5]: 'Transform to flat projection'
[6]: 'Create ppp format of the WT data set'
[7]: 'Clip those WTs inside RLP'
[8]: 'Calculate nearest neighbor with nndist() function and add collumn to data frame'
[9]: 'Check for reliability with Leaflet and create wts_rlp_distances.csv'
")
pacman::p_load(data.table, tidyverse, magrittr, leaflet, sp, raster, htmltools,
htmlwidgets, sf, spatstat, rgeos, rgdal, DiagrammR)
Sys.setenv(LANG = "en")
pacman::p_load(data.table, tidyverse, magrittr, leaflet, sp, raster, htmltools,
htmlwidgets, sf, spatstat, rgeos, rgdal, DiagrammR)
Sys.setenv(LANG = "en")
pacman::p_load(data.table, tidyverse, magrittr, leaflet, sp, raster, htmltools,
htmlwidgets, sf, spatstat, rgeos, rgdal, DiagrammeR)
#create flow chart of distance estimation
grViz(diagram = "digraph flowchart {
node [fontname = arial, shape = oval, fixedsize = FALSE]
tab1 [label = '@@1', fontsize=30]
tab2 [label = '@@2', fontsize=30]
tab3 [label = '@@3', fontsize=30]
tab4 [label = '@@4', fontsize=30]
tab5 [label = '@@5', fontsize=30]
tab6 [label = '@@6', fontsize=30]
tab7 [label = '@@7', fontsize=30]
tab8 [label = '@@8', fontsize=30]
tab9 [label = '@@9', fontsize=30]
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7 -> tab8 -> tab9;
}
[1]: 'Import of merged data set of Amprion and MaStR'
[2]: 'Adjust format'
[3]: 'Load border of RLP as shape files'
[4]: 'Unify CRS'
[5]: 'Transform to flat projection'
[6]: 'Create ppp format of the WT data set'
[7]: 'Clip those WTs inside RLP'
[8]: 'Calculate nearest neighbor with nndist() function and add collumn to data frame'
[9]: 'Check for reliability with Leaflet and create wts_rlp_distances.csv'
")
#clean environment
rm(border_sp, border_flat, border_owin, border_sf, wts_rlp_ppp, wts_rlp_flat,
wts_rlp_sf, nearest, MaStR_amprion, WGS84, wts_rlp_df, wts_rlp)
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/MaStR_amprion_analysis")
Sys.setenv(LANG = "en")
pacman::p_load(data.table, tidyverse, magrittr, leaflet, htmltools,
htmlwidgets)
wts_rlp_distances$inbetriebnahme <- as.Date(
wts_rlp_distances$inbetriebnahme, "%Y-%m-%d")
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/MaStR_amprion_analysis")
MaStR_amprion <- read.csv("MaStR_amprion2019.csv")
wts_rlp_rotor <- filter(wts_rlp_distances, rotor_m != "NA")
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/MaStR_amprion_analysis")
wts_rlp_rotor <- filter(wts_rlp_distances, rotor_m != "NA")
wts_rlp_rotor <- filter(wts_rlp_rotor, rotor_m < 200)
View(wts_rlp_distances)
wts_rlp_filtered <- filter(wts_rlp_distances, nearest < 1000 & nearest != 0)
View(wts_rlp_distances)
wts_rlp_filtered <- na.omit(wts_rlp_filtered)
wts_rlp_filtered <- filter(wts_rlp_distances, nearest < 1000 & nearest != 0)
View(wts_rlp_filtered)
#omit NA values
sum(is.na(wts_rlp_filtered$menge_mwh))
wts_rlp_filtered <- na.omit(wts_rlp_filtered)
#filter those with electricity yield smaller than 10 Mwh and small distance
wts_rlp_filtered <- filter(wts_rlp_filtered, menge_mwh > 20)
wts_rlp_filtered <- filter(wts_rlp_filtered, nearest > 30)
View(wts_rlp_filtered)
#filter out with electricity yield per m2 above 100 kwh/m2
wts_rlp_filtered <- filter(wts_rlp_filtered, kwh_m2 < 500)
lm_e_yield_per_area <- lm(
wts_rlp_filtered$kwh_m2 ~ wts_rlp_filtered$inbetriebnahme)
summary(lm_e_yield_per_area)
plot(lm_e_yield_per_area)
