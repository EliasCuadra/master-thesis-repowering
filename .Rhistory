geom_smooth(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2, colour = "2019"), method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
ylim(0,100) +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
xlab("Commissioning date") +
ylab("Electricity yield per m^2 and year [kWh/m?a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 27.4, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=25,label="Mean of 27.4 ~kWh/m^2a~ after 2010", size = 2.5) +
geom_hline(yintercept = 33.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=35.5,label="Mean of 33.5 kWh/m^2a in 2021", size = 2.5) +
geom_hline(yintercept = 40.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=42.5,label="Mean of 42.5 kWh/m^2a in 2021", size = 2.5) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=5,label= "R? = ~ 11 % \n p-value << 0.001") +
scale_colour_manual(name = "Joined data from MaStR and amprion", values="#0051fd")
#plot
p_e_yield_per_area +  theme(legend.position = c(0.7,0.9))
p_e_yield_per_area <- ggplot() +
geom_point(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2), size = 0.4, colour = "#0051fd") +
geom_smooth(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2, colour = "2019"), method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
ylim(0,100) +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
xlab("Commissioning date") +
ylab("Electricity yield per m^2 and year [kWh/m?a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 27.4, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=25,label="Mean of ~ 27.4 kWh/m²a after 2010", size = 2.5) +
geom_hline(yintercept = 33.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=35.5,label="Mean of  ~ 33.5 kWh/m²a in 2021", size = 2.5) +
geom_hline(yintercept = 40.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=42.5,label="Mean of ~ 40.5 kWh/m²a in 2021", size = 2.5) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=5,label= "R? = ~ 11 % \n p-value << 0.001") +
scale_colour_manual(name = "Joined data from MaStR and amprion", values="#0051fd")
#plot
p_e_yield_per_area +  theme(legend.position = c(0.7,0.9))
p_e_yield_per_area <- ggplot() +
geom_point(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2), size = 0.4, colour = "#0051fd") +
geom_smooth(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2, colour = "2019"), method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
ylim(0,100) +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
xlab("Commissioning date") +
ylab("Electricity yield per m^2 and year [kWh/m²a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 27.4, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=25,label="Mean of ~ 27.4 kWh/m²a after 2010", size = 2.5) +
geom_hline(yintercept = 33.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=35.5,label="Mean of  ~ 33.5 kWh/m²a in 2021", size = 2.5) +
geom_hline(yintercept = 40.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=42.5,label="Mean of ~ 40.5 kWh/m²a in 2021", size = 2.5) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=5,label= "R? = ~ 11 % \n p-value << 0.001") +
scale_colour_manual(name = "Joined data from MaStR and amprion", values="#0051fd")
#plot
p_e_yield_per_area +  theme(legend.position = c(0.7,0.9))
#save plot
ggsave("e_yield_per_m2_over_commissioning_date.png",
plot = last_plot(),
dpi = 900,
width = 7,
height = 4)
p_e_yield_per_area <- ggplot() +
geom_point(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2), size = 0.4, colour = "#0051fd") +
geom_smooth(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2, colour = "2019"), method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
ylim(0,100) +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
xlab("Commissioning date") +
ylab("Electricity yield per m^2 and year [kWh/m²a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 27.4, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=25,label="Mean of ~ 27.4 kWh/m²a after 2010", size = 2.5) +
geom_hline(yintercept = 33.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=35.5,label="Predicted mean of  ~ 33.5 kWh/m²a in 2021", size = 2.5) +
geom_hline(yintercept = 40.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=42.5,label="Predicted mean of ~ 40.5 kWh/m²a in 2030", size = 2.5) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=5,label= "R? = ~ 11 % \n p-value << 0.001") +
scale_colour_manual(name = "Joined data from MaStR and amprion", values="#0051fd")
#plot
p_e_yield_per_area +  theme(legend.position = c(0.7,0.9))
#save plot
ggsave("e_yield_per_m2_over_commissioning_date.png",
plot = last_plot(),
dpi = 900,
width = 7,
height = 4)
p_e_yield_per_area <- ggplot() +
geom_point(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2), size = 0.4, colour = "#0051fd") +
geom_smooth(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2, colour = "2019"), method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
ylim(0,80) +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
xlab("Commissioning date") +
ylab("Electricity yield per m^2 and year [kWh/m²a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 27.4, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=25,label="Mean of ~ 27.4 kWh/m²a after 2010", size = 2.5) +
geom_hline(yintercept = 33.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=35.5,label="Predicted mean of  ~ 33.5 kWh/m²a in 2021", size = 2.5) +
geom_hline(yintercept = 40.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=42.5,label="Predicted mean of ~ 40.5 kWh/m²a in 2030", size = 2.5) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=5,label= "R? = ~ 11 % \n p-value << 0.001") +
scale_colour_manual(name = "Joined data from MaStR and amprion", values="#0051fd")
#plot
p_e_yield_per_area +  theme(legend.position = c(0.7,0.9))
#save plot
ggsave("e_yield_per_m2_over_commissioning_date.png",
plot = last_plot(),
dpi = 900,
width = 7,
height = 4)
p_e_yield_per_area <- ggplot() +
geom_point(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2), size = 0.4, colour = "#0051fd") +
geom_smooth(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2, colour = "2019"), method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
ylim(0,80) +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
xlab("Commissioning date") +
ylab("Electricity yield per area [kWh/m²a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 27.4, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=25,label="Mean of ~ 27.4 kWh/m²a after 2010", size = 2.5) +
geom_hline(yintercept = 33.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=35.5,label="Predicted mean of  ~ 33.5 kWh/m²a in 2021", size = 2.5) +
geom_hline(yintercept = 40.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=42.5,label="Predicted mean of ~ 40.5 kWh/m²a in 2030", size = 2.5) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=5,label= "R? = ~ 11 % \n p-value << 0.001") +
scale_colour_manual(name = "Joined data from MaStR and amprion", values="#0051fd")
#plot
p_e_yield_per_area +  theme(legend.position = c(0.7,0.9))
#save plot
ggsave("e_yield_per_m2_over_commissioning_date.png",
plot = last_plot(),
dpi = 900,
width = 7,
height = 4)
p_e_yield_per_area <- ggplot() +
geom_point(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2), size = 0.4, colour = "#0051fd") +
geom_smooth(data = wts_rlp_filtered, aes(x=inbetriebnahme, y=kwh_m2, colour = "2019"), method=lm, se=TRUE, fullrange = TRUE, size = 0.5)  +
theme_light() +
ylim(0,80) +
scale_x_date(limits = as.Date(c("1990-01-01","2030-12-31"))) +
xlab("Commissioning date") +
ylab("Electricity yield per area [kWh/m²a]") +
theme( axis.text=element_text(size=11),
axis.title=element_text(size=12),
plot.title = element_text(size=14),
legend.position = c(0.85, 0.9),
legend.direction = "horizontal") +
geom_hline(yintercept = 27.4, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=25,label="Mean of ~ 27.4 kWh/m²a after 2010", size = 2.5) +
geom_hline(yintercept = 33.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=35.5,label="Predicted mean of  ~ 33.5 kWh/m²a in 2021", size = 2.5) +
geom_hline(yintercept = 40.5, linetype = 'dashed', size = 0.25) +
annotate(geom="text",x=as.Date("1995-01-01"),
y=42.5,label="Predicted mean of ~ 40.5 kWh/m²a in 2030", size = 2.5) +
annotate(geom="text",x=as.Date("2025-01-01"),
y=5,label= "R² = ~ 11 % \n p-value << 0.001") +
scale_colour_manual(name = "Joined data from MaStR and amprion", values="#0051fd")
#plot
p_e_yield_per_area +  theme(legend.position = c(0.7,0.9))
#save plot
ggsave("e_yield_per_m2_over_commissioning_date.png",
plot = last_plot(),
dpi = 900,
width = 7,
height = 4)
40.5*(1000/8765)
4.6/(0.016*0.5*1.3)
#if average is 40.5 kwh/m2a in 2030
#4.62065 W/m2
#wind speed required of
z <- 442.3077
z^(1/3)
(22*1e+09)/40.5
543209877/1000000
(543.2099/19847)*100
2.736987/1.5
z^(1/3)
y^(1/3)
x^(1/3)
(6.782*1e+09)/174168
(6.782*1e+09)/296434447
22.87858*(1000/8765)
2.61/(0.016*0.5*1.3)
250.9615^(1/3)
?row_spec
## Summary
??row_spec
## Summary
Sys.setenv(LANG = "en")
pacman::p_load(rio, data.table, tidyverse, tidyr, purrr, magrittr, compare,
ggplot2, DiagrammeR)
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/amprion")
amprion_2015 <- read.csv("EEG_StammBew_2015_Amprion-EAtlas.csv")
amprion_2016 <- read.csv("EEG_StammBew_2016_Amprion-EAtlas.csv")
amprion_2017 <- read.csv("EEG_StammBew_2017_Amprion-EAtlas.csv")
amprion_2018 <- read.csv("EEG_StammBew_2018_Amprion-EAtlas.csv")
amprion_2019 <- read.csv("EEG-StammBew_2019_Amprion-EAtlas.csv")
names(amprion_2019)[1] <- "gem"
names(amprion_2018)[1] <- "gem"
names(amprion_2017)[1] <- "gem"
selection_2015 <- amprion_2015[,c(1:3,8,10,17,27)]
selection_2016 <- amprion_2016[,c(1:3,8,10,17,27)]
selection_2017 <- amprion_2017[,c(1:3,8,10,17,27)]
selection_2018 <- amprion_2018[,c(1:3,8,10,17,27)]
selection_2019 <- amprion_2019[,c(1:3,7,9,16,26)]
selection_2015$inbetriebnahme <- as.Date(selection_2015$inbetriebnahme, "%d/%m/%Y")
selection_2016$inbetriebnahme <- as.Date(selection_2016$inbetriebnahme, "%d/%m/%Y")
selection_2017$inbetriebnahme <- as.Date(selection_2017$inbetriebnahme, "%d/%m/%Y")
selection_2018$inbetriebnahme <- as.Date(selection_2018$inbetriebnahme, "%d/%m/%Y")
selection_2019$inbetriebnahme <- as.Date(selection_2019$inbetriebnahme, "%d/%m/%Y")
outliers_2015 <- filter(selection_2015, leistung < 100 | leistung > 4500 | inbetriebnahme > "2015-02-15")
outliers_2016 <- filter(selection_2016, leistung < 100 | leistung > 4500 | inbetriebnahme > "2016-02-15")
outliers_2017 <- filter(selection_2017, leistung < 100 | leistung > 4500 | inbetriebnahme > "2017-02-15")
outliers_2018 <- filter(selection_2018, leistung < 100 | leistung > 4500 | inbetriebnahme > "2018-02-15")
outliers_2019 <- filter(selection_2019, leistung < 100 | leistung > 4500 | inbetriebnahme > "2019-02-15")
selection_2015_without_outliers <- setdiff(selection_2015, outliers_2015)
selection_2016_without_outliers <- setdiff(selection_2016, outliers_2016)
selection_2017_without_outliers <- setdiff(selection_2017, outliers_2017)
selection_2018_without_outliers <- setdiff(selection_2018, outliers_2018)
selection_2019_without_outliers <- setdiff(selection_2019, outliers_2019)
#delete some
rm(selection_2015, selection_2016, selection_2017, selection_2018,selection_2019)
selection_2015_without_outliers <- selection_2015_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
selection_2016_without_outliers <- selection_2016_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
selection_2017_without_outliers <- selection_2017_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
selection_2018_without_outliers <- selection_2018_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
selection_2019_without_outliers <- selection_2019_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
View(amprion_2019)
(22*1e+12)/(2.2*8765*1e+06)
(1140.901/19847)*100
(6.782*1e+12)/(2.2*8765*1e+06)
(351.7088/19847)*100
(655*1e+12)/(2.2*8765*1e+06)
(33967.74/19847)*100
(33967.74/357022)*100
#packages
Sys.setenv(LANG = "en")
pacman::p_load(rio, data.table, tidyverse, tidyr, purrr, magrittr, compare,
rgdal, raster, rgeos, DiagrammR)
pacman::p_load(rio, data.table, tidyverse, tidyr, purrr, magrittr, compare,
rgdal, raster, rgeos, DiagramR)
pacman::p_load(rio, data.table, tidyverse, tidyr, purrr, magrittr, compare,
rgdal, raster, rgeos, DiagrammeR)
MaStR <- read.csv("MaStR.csv", sep = ";", na.strings=c("","NA"))
amprion2019 <- read.csv("amprion_2019_processed_and_without_outliers.csv", na.strings=c("","NA"))
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/MaStR_amprion")
MaStR <- read.csv("MaStR.csv", sep = ";", na.strings=c("","NA"))
amprion2019 <- read.csv("amprion_2019_processed_and_without_outliers.csv", na.strings=c("","NA"))
amprion2019 <- amprion2019[,c(2:8)]
MaStR <- MaStR[,c(1, 5, 7, 16, 17, 18, 21, 22, 23, 24, 43)]
MaStR <- MaStR[,c(2:6,8,9,11)]
names(MaStR)[1] <- "leistung_m"
names(MaStR)[2] <- "inbetrieb_m"
names(MaStR)[3] <- "gem_m"
names(MaStR)[4] <- "b_wgs84"
names(MaStR)[5] <- "l_wgs84"
names(MaStR)[6] <- "nabe_m"
names(MaStR)[7] <- "rotor_m"
names(MaStR)[8] <- "eeg_nr"
#check for Na's in coordinates
sum(is.na(MaStR$b_wgs84))
sum(is.na(MaStR$l_wgs84))
sum(is.na(MaStR$eeg_nr))
MaStR_without_na <- filter(MaStR, ! is.na(MaStR$eeg_nr) & ! is.na(MaStR$b_wgs84))
MaStR_without_na <- filter(MaStR, ! is.na(MaStR$eeg_nr) &
! is.na(MaStR$b_wgs84))
names(amprion2019)[7] <- "eeg_nr"
names(amprion2019)[7] <- "eeg_nr"
amprion2019 <- read.csv("amprion_2019_processed_and_without_outliers.csv",
na.strings=c("","NA"))
#choose variables
amprion2019 <- amprion2019[,c(2:8)]
names(amprion2019)[6] <- "eeg_nr"
MaStR_amprion2019 <- merge(data.frame(MaStR_without_na),
data.frame(amprion2019),
by = "eeg_nr",
all = TRUE)
#filter out NAs coordinates and remove duplicates
sum(is.na(MaStR_amprion2019$eeg_nr))
sum(is.na(MaStR_amprion2019$b_wgs84))
MaStR_amprion2019_without_na <- filter(MaStR_amprion2019, !
is.na(MaStR_amprion2019$b_wgs84))
sum(duplicated(MaStR_amprion2019_without_na$eeg_nr))
MaStR_amprion2019_without_dup <- distinct(MaStR_amprion2019_without_na$eeg_nr)
MaStR_amprion2019_without_dup <- distinct(MaStR_amprion2019_without_na$eeg_nr)
MaStR_amprion2019_without_dup <- unique(MaStR_amprion2019_without_na$eeg_nr)
MaStR_amprion2019_without_dup <- distinct(MaStR_amprion2019_without_na,
keep_all = TRUE)
MaStR_amprion2019_without_dup <- distinct(MaStR_amprion2019_without_na)
#write csv
write.csv(MaStR_amprion2019_without_dup,"MaStR_amprion2019.csv")
#create flow chart
grViz(diagram = "digraph flowchart {
node [fontname = arial, shape = oval, fixedsize = FALSE]
tab1 [label = '@@1', fontsize=30]
tab2 [label = '@@2', fontsize=30]
tab3 [label = '@@3', fontsize=30]
tab4 [label = '@@4', fontsize=30]
tab5 [label = '@@5', fontsize=30]
tab6 [label = '@@6', fontsize=30]
tab7 [label = '@@7', fontsize=30]
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7
}
[1]: 'Import data'
[2]: 'Drop unnecessary variables'
[3]: 'Rename columns'
[4]: 'Check for NA's and delet rows with NA values'
[5]: 'Merge data sets by EEG system key'
[6]: 'Filter out NA's again and delet duplicates
[7]: 'Write CSV file as MaStR_amprion2019.csv'
")
#create flow chart
grViz(diagram = "digraph flowchart {
node [fontname = arial, shape = oval, fixedsize = FALSE]
tab1 [label = '@@1', fontsize=30]
tab2 [label = '@@2', fontsize=30]
tab3 [label = '@@3', fontsize=30]
tab4 [label = '@@4', fontsize=30]
tab5 [label = '@@5', fontsize=30]
tab6 [label = '@@6', fontsize=30]
tab7 [label = '@@7', fontsize=30]
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7
}
[1]: 'Import data'
[2]: 'Drop unnecessary variables'
[3]: 'Rename columns'
[4]: 'Check for NAs and delet rows with NA values'
[5]: 'Merge data sets by EEG system key'
[6]: 'Filter out NAs again and delet duplicates
[7]: 'Write CSV file as MaStR_amprion2019.csv'
")
#create flow chart
grViz(diagram = "digraph flowchart {
node [fontname = arial, shape = oval, fixedsize = FALSE]
tab1 [label = '@@1', fontsize=30]
tab2 [label = '@@2', fontsize=30]
tab3 [label = '@@3', fontsize=30]
tab4 [label = '@@4', fontsize=30]
tab5 [label = '@@5', fontsize=30]
tab6 [label = '@@6', fontsize=30]
tab7 [label = '@@7', fontsize=30]
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7
}
[1]: 'Import data'
[2]: 'Drop unnecessary variables'
[3]: 'Rename columns'
[4]: 'Check for NA's and delet rows with NA values'
[5]: 'Merge data sets by EEG system key'
[6]: 'Filter out NAs again and delet duplicates'
[7]: 'Write CSV file as MaStR_amprion2019.csv'
")
#create flow chart
grViz(diagram = "digraph flowchart {
node [fontname = arial, shape = oval, fixedsize = FALSE]
tab1 [label = '@@1', fontsize=30]
tab2 [label = '@@2', fontsize=30]
tab3 [label = '@@3', fontsize=30]
tab4 [label = '@@4', fontsize=30]
tab5 [label = '@@5', fontsize=30]
tab6 [label = '@@6', fontsize=30]
tab7 [label = '@@7', fontsize=30]
tab1 -> tab2 -> tab3 -> tab4 -> tab5 -> tab6 -> tab7
}
[1]: 'Import data'
[2]: 'Drop unnecessary variables'
[3]: 'Rename columns'
[4]: 'Check for NAs and delet rows with NA values'
[5]: 'Merge data sets by EEG system key'
[6]: 'Filter out NAs again and delet duplicates'
[7]: 'Write CSV file as MaStR_amprion2019.csv'
")
Sys.setenv(LANG = "en")
pacman::p_load(rio, data.table, tidyverse, tidyr, purrr, magrittr, compare,
ggplot2, DiagrammeR)
amprion_2015 <- read.csv("EEG_StammBew_2015_Amprion-EAtlas.csv")
amprion_2016 <- read.csv("EEG_StammBew_2016_Amprion-EAtlas.csv")
amprion_2017 <- read.csv("EEG_StammBew_2017_Amprion-EAtlas.csv")
amprion_2018 <- read.csv("EEG_StammBew_2018_Amprion-EAtlas.csv")
amprion_2019 <- read.csv("EEG-StammBew_2019_Amprion-EAtlas.csv")
setwd("C:/Users/Dell/Desktop/MasterThesis/thesis_elias_cuadra_219202265/data/amprion")
amprion_2015 <- read.csv("EEG_StammBew_2015_Amprion-EAtlas.csv")
amprion_2016 <- read.csv("EEG_StammBew_2016_Amprion-EAtlas.csv")
amprion_2017 <- read.csv("EEG_StammBew_2017_Amprion-EAtlas.csv")
amprion_2018 <- read.csv("EEG_StammBew_2018_Amprion-EAtlas.csv")
amprion_2019 <- read.csv("EEG-StammBew_2019_Amprion-EAtlas.csv")
names(amprion_2019)[1] <- "gem"
names(amprion_2018)[1] <- "gem"
names(amprion_2017)[1] <- "gem"
selection_2015 <- amprion_2015[,c(1:3,8,10,17,27)]
selection_2016 <- amprion_2016[,c(1:3,8,10,17,27)]
selection_2017 <- amprion_2017[,c(1:3,8,10,17,27)]
selection_2018 <- amprion_2018[,c(1:3,8,10,17,27)]
selection_2019 <- amprion_2019[,c(1:3,7,9,16,26)]
selection_2015$inbetriebnahme <- as.Date(selection_2015$inbetriebnahme,
"%d/%m/%Y")
selection_2016$inbetriebnahme <- as.Date(selection_2016$inbetriebnahme,
"%d/%m/%Y")
selection_2017$inbetriebnahme <- as.Date(selection_2017$inbetriebnahme,
"%d/%m/%Y")
selection_2018$inbetriebnahme <- as.Date(selection_2018$inbetriebnahme,
"%d/%m/%Y")
selection_2019$inbetriebnahme <- as.Date(selection_2019$inbetriebnahme,
"%d/%m/%Y")
outliers_2015 <- filter(selection_2015, leistung < 100 | leistung > 4500 |
inbetriebnahme > "2015-02-15")
outliers_2016 <- filter(selection_2016, leistung < 100 | leistung > 4500 |
inbetriebnahme > "2016-02-15")
outliers_2017 <- filter(selection_2017, leistung < 100 | leistung > 4500 |
inbetriebnahme > "2017-02-15")
outliers_2018 <- filter(selection_2018, leistung < 100 | leistung > 4500 |
inbetriebnahme > "2018-02-15")
outliers_2019 <- filter(selection_2019, leistung < 100 | leistung > 4500 |
inbetriebnahme > "2019-02-15")
selection_2015_without_outliers <- setdiff(selection_2015, outliers_2015)
selection_2016_without_outliers <- setdiff(selection_2016, outliers_2016)
selection_2017_without_outliers <- setdiff(selection_2017, outliers_2017)
selection_2018_without_outliers <- setdiff(selection_2018, outliers_2018)
selection_2019_without_outliers <- setdiff(selection_2019, outliers_2019)
rm(selection_2015, selection_2016, selection_2017, selection_2018,
selection_2019)
selection_2015_without_outliers <- selection_2015_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
selection_2016_without_outliers <- selection_2016_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
selection_2017_without_outliers <- selection_2017_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
selection_2018_without_outliers <- selection_2018_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
selection_2019_without_outliers <- selection_2019_without_outliers %>%
mutate(flh = menge_kwh/leistung) %>%
mutate(menge_mwh = round(menge_kwh/1000))
write.csv(
selection_2015_without_outliers,
"results_of_preparation/amprion_2015_processed.csv")
write.csv(
selection_2016_without_outliers,
"results_of_preparation/amprion_2016_processed.csv")
write.csv(
selection_2017_without_outliers,
"results_of_preparation/amprion_2017_processed.csv")
write.csv(
selection_2018_without_outliers,
"results_of_preparation/amprion_2018_processed.csv")
write.csv(
selection_2019_without_outliers,
"results_of_preparation/amprion_2019_processed.csv")
